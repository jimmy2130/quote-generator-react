{"version":3,"sources":["components/button-container/button-container.component.jsx","components/quote-container/quote-container.component.jsx","components/loader/loader.component.jsx","App.js","serviceWorker.js","index.js"],"names":["ButtonContainer","quoteObj","getQuote","className","onClick","author","quote","twitterUrl","window","open","tweetQuote","title","QuoteContainer","props","length","Loader","App","setState","finished","fetch","proxyUrl","then","response","text","rawText","replace","removed","JSON","parse","quoteAuthor","quoteText","catch","err","state","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uVAGaA,G,YAAkB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAQ1C,OACE,yBAAKC,UAAU,oBACb,4BAAQC,QAAS,kBARF,SAACH,GAAc,IACxBI,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MACVC,EAAU,gDAA4CD,EAA5C,cAAuDD,GACvEG,OAAOC,KAAKF,EAAY,UAKCG,CAAWT,IAAWE,UAAU,iBAAiBQ,MAAM,eAC5E,uBAAGR,UAAU,oBAEf,4BAAQC,QAASF,GAAjB,gBCZOU,EAAiB,SAACC,GAAW,IAChCZ,EAAaY,EAAbZ,SACAK,EAAkBL,EAAlBK,MAAOD,EAAWJ,EAAXI,OAEf,OACE,yBAAKF,UAAU,mBAEb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,sBACb,0BAAMA,UAAWG,EAAMQ,OAAS,IAAM,aAAe,IAAKR,IAG5D,yBAAKH,UAAU,gBACb,8BAAOE,GAAkB,YAE3B,kBAAC,EAAoBQ,KChBdE,G,MAAS,WACpB,OACE,yBAAKZ,UAAU,aCiDJa,G,wDAhDb,aAAe,IAAD,8BACZ,gBASFd,SAAW,WACT,EAAKe,SAAS,CAACC,UAAU,IAIzBC,MAAMC,oHACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAIA,EAAQC,QAAQ,KAAM,OACtCJ,MAAK,SAAAK,GAAO,OAAIC,KAAKC,MAAMF,MAC3BL,MAAK,SAAApB,GACJ,EAAKgB,SAAS,CAAEZ,OAAQJ,EAAS4B,YAAavB,MAAOL,EAAS6B,UAAWZ,UAAU,OAGpFa,OAAM,SAAAC,GACL,EAAKf,SAAS,CAAEZ,OAAQ,UAAWC,MAAO,kBAAmBY,UAAU,QArB3E,EAAKe,MAAQ,CACXf,UAAU,EACVb,OAAQ,GACRC,MAAO,IANG,E,gEA8BZ4B,KAAKhC,a,+BAIL,OACE,yBAAKC,UAAU,OAEb+B,KAAKD,MAAMf,SACT,kBAAC,EAAD,CAAgBjB,SAAUiC,KAAKD,MAAO/B,SAAUgC,KAAKhC,WAErD,kBAAC,EAAD,W,GAzCQiC,cCOEC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91ae0bd9.chunk.js","sourcesContent":["import React from 'react';\nimport './button-container.styles.css';\n\nexport const ButtonContainer = ({ quoteObj, getQuote }) => {\n\n  const tweetQuote = (quoteObj) => {\n    const { author, quote } = quoteObj;\n    const twitterUrl = `https://twitter.com/intent/tweet?text=${quote} - ${author}`;\n    window.open(twitterUrl, '_blank');\n  }\n\n  return(\n    <div className=\"button-container\">\n      <button onClick={() => tweetQuote(quoteObj)} className=\"twitter-button\" title=\"Tweet This!\">\n        <i className=\"fab fa-twitter\"></i>\n      </button>\n      <button onClick={getQuote}>New Quote</button>\n    </div>\n  )\n};\n\n\n\n","import React from 'react';\nimport './quote-container.styles.css';\nimport { ButtonContainer } from '../button-container/button-container.component.jsx';\n\nexport const QuoteContainer = (props) => {\n  const { quoteObj } = props;\n  const { quote, author } = quoteObj;\n  // console.log(quote)\n  return(\n    <div className=\"quote-container\">\n      {/* quote */}\n      <div className=\"quote-text\">\n        <i className=\"fas fa-quote-left\"></i>\n        <span className={quote.length > 120 ? 'long-quote' : ''}>{quote}</span>\n      </div>\n      {/* author */}\n      <div className=\"quote-author\">\n        <span>{author ? author : 'Unknown'}</span>\n      </div>\n      <ButtonContainer {...props}/>\n    </div>\n  )\n};","import React from 'react';\nimport './loader.styles.css';\n\nexport const Loader = () => {\n  return(\n    <div className=\"loader\"></div>\n  )\n}","import React, { Component } from 'react';\nimport { QuoteContainer } from './components/quote-container/quote-container.component.jsx';\nimport { Loader } from './components/loader/loader.component.jsx';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      finished: false,\n      author: '',\n      quote: ''\n    };\n  }\n\n  getQuote = () => {\n    this.setState({finished: false});\n    const proxyUrl = 'https://young-journey-86731.herokuapp.com/';\n    const apiUrl = 'http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json';\n\n    fetch(proxyUrl + apiUrl)\n      .then(response => response.text())\n      .then(rawText => rawText.replace(\"\\\\\", \"\"))\n      .then(removed => JSON.parse(removed))\n      .then(quoteObj => {\n        this.setState({ author: quoteObj.quoteAuthor, quote: quoteObj.quoteText, finished: true})\n        // console.log(this.state)\n      })\n      .catch(err => {\n        this.setState({ author: 'Unknown', quote: 'Please refresh.', finished: true})\n        // console.log(this.state)\n      })\n  }\n\n  componentDidMount() {\n    this.getQuote()\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n      {\n        this.state.finished ? (\n          <QuoteContainer quoteObj={this.state} getQuote={this.getQuote} />\n        ) : (\n          <Loader />\n        )\n      }\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}